{
    "files.defaultLanguage": "c++", // ctrl+N新建文件后默认的语言
    "editor.formatOnType": false,  // 输入分号(C/C++的语句结束标识)后自动格式化当前这一行的代码
    "editor.suggest.snippetsPreventQuickSuggestions": false, // clangd的snippets有很多的跳转点，不用这个就必须手动触发Intellisense了
    "editor.acceptSuggestionOnEnter": "off", // 我个人的习惯，按回车时一定是真正的换行，只有tab才会接受Intellisense
    // "editor.snippetSuggestions": "top", // （可选）snippets显示在补全列表顶端，默认是inline

    "code-runner.runInTerminal": true, // 设置成false会在“输出”中输出，无法输入
    "code-runner.executorMap": {
        "cpp": " cd $dir && g++ $fileName -D LOCAL -o          C:/Users/cruelking/Desktop/PAT/workspace/$fileNameWithoutExt.exe && C:/Users/cruelking/Desktop/PAT/workspace/$fileNameWithoutExt.exe",
    },
    "code-runner.saveFileBeforeRun": true, // run code前保存
    "code-runner.preserveFocus": true,     // 若为false，run code后光标会聚焦到终端上。如果需要频繁输入数据可设为false
    "code-runner.clearPreviousOutput": true, // 每次run code前清空属于code runner的终端消息，默认false
    "code-runner.ignoreSelection": true,   // 默认为false，效果是鼠标选中一块代码后可以单独执行，但C是编译型语言，不适合这样用

    "C_Cpp.clang_format_sortIncludes": true,
    "files.associations": {
        "deque": "cpp",
        "utility": "cpp",
        "xstring": "cpp",
        "xtree": "cpp",
        "iostream": "cpp"
    }, // 格式化时调整include的顺序（按字母排序）
}